<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprDog</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objCanCollide</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup default variables

moveSpeed = room_speed / 12;
baseSpeed = moveSpeed;

canBark = true;
//How often can bark
barkCooldown = audio_sound_length(sndBark)*room_speed*0.9; // 90% of back sound length

//Number of ticks can sprint
maxSprint = 100;
currentSprint = maxSprint;
sprinting = false;

sneaking = false;

moveVec[0] = 0;
moveVec[1] = 0;
moveDir = 0;

currentDir = 0;
arrayIndex = 0;

changedSpriteDir = 999;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create shadow
myShadow = instance_create(x, y+50, objShadow)
myShadow.parent = self.id;
			</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite Array

spriteArray[0] = sprDogE;
spriteArray[1] = sprDogNE;
spriteArray[2] = sprDogN;
spriteArray[3] = sprDogNW;
spriteArray[4] = sprDogW;
spriteArray[5] = sprDogSW;
spriteArray[6] = sprDogS;
spriteArray[7] = sprDogSE;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy shadow
with(myShadow) {
  instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Allow barking

canBark = true;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control movement

if (scrIsUpPressed()) {
  phy_speed_y = -1 * moveSpeed;
  //y -= moveSpeed;
} else if (scrIsDownPressed()) {
  //y += moveSpeed;
  phy_speed_y = moveSpeed;
} else {
  phy_speed_y = 0;
}
if (scrIsLeftPressed()) {
  //x -= moveSpeed;
   phy_speed_x = -1 * moveSpeed;
} else if (scrIsRightPressed()) {
  //x += moveSpeed;
   phy_speed_x = moveSpeed;
} else {
  phy_speed_x = 0;
}

if (phy_speed_x != 0 || phy_speed_y != 0) {
  var normed = scrNormalizeVector(phy_speed_x, phy_speed_y);
  moveDir = point_direction(0, 0, phy_speed_x, phy_speed_y);
  moveVec = normed;
  phy_speed_x = normed[0] * moveSpeed;
  phy_speed_y = normed[1] * moveSpeed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///REDO:  Keep within boundaries


var newx = phy_position_x + phy_speed_x;
var newy = phy_position_y + phy_speed_y;

if (newx &lt; 0) {
  phy_speed_x = 0;
  phy_position_x = 0;
} else if (newx &gt; room_width) {
  phy_speed_x = 0;
  phy_position_x = room_width;
}

if (newy &lt; 22 ) {
  phy_speed_y = 0;
  phy_position_y = 22
} else if (newy &gt; 482) {
  phy_speed_y = 0;
  phy_position_y = 482;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprint handler
/*if (!sprinting &amp;&amp; currentSprint &lt; maxSprint) {
  currentSprint++;
} else if (sprinting) {
  if (currentSprint &gt; 0 &amp;&amp; keyboard_check(vk_control)) {
    currentSprint--;
  } else {
    sprinting = false;
    moveSpeed = baseSpeed;
  }
} else {
  if (keyboard_check(vk_control) &amp;&amp; currentSprint &gt; (0.2 * maxSprint) &amp;&amp; !sneaking) {
    sprinting = true;
    moveSpeed *= 2;
  }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sneak handling
if (sneaking &amp;&amp; !keyboard_check(vk_shift)) {
  sneaking = false;
  moveSpeed = baseSpeed;
} else if (!sneaking &amp;&amp; keyboard_check(vk_shift)) &amp;&amp; !sprinting {
  sneaking = true;
  moveSpeed *= 0.75;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprite handling

//If moving
if (phy_speed_x != 0 || phy_speed_y != 0) {

  //Get proper image index
  if (sprite_index == sprDog) {
    var image = 0;
  } else {
    var image = image_index;
  }

  //Get current direction
  currentDir = point_direction(0, 0, phy_speed_x, phy_speed_y);
  
  var index = (floor(((currentDir / 22.5) + 1)/2)) % 8;
  
  if (arrayIndex != index &amp;&amp; changedSpriteDir &gt; (room_speed / 10)) {
    image_speed = 0.5;

    
    var s = sign(arrayIndex - index);    
    var nextIndex = (arrayIndex - (s));
    if (nextIndex &lt; 0) {
      nextIndex = 8 + nextIndex;
    }
    
    if (index == 0) {
      nextIndex = arrayIndex + 1;
    }
    
    nextIndex %= 8;
    
    image_index = image;
    sprite_index = spriteArray[nextIndex];
    arrayIndex = nextIndex;

    changedSpriteDir = 0;
  }

  
} else {
//If not moving
  image_speed = 0;
  
  if (sprite_index != sprDog) {
    sprite_index = sprDog;
  }
}

changedSpriteDir++;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objCanCollide">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Empty
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draws indicators for dog stuff

var color = c_green;

if (currentSprint &lt;= (0.2 * maxSprint)) {
  color = c_red;    
}

draw_text_color(100, 25, string(currentSprint) + " / " + string(maxSprint), color, color, color, color, 100);

if (canBark) {
  draw_text_color(300, 25, "Can bark!", c_green, c_green, c_green, c_green, 100);
} else {
  draw_text_color(300, 25, "Can't bark", c_red, c_red, c_red, c_red, 100);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create bark

if (canBark) {

  var bark = instance_create(phy_position_x + moveVec[0] * 20, phy_position_y + moveVec[1] * 20, objBark);
  var barkV = instance_create(x, y, objBarkVisible);
  bark.parent = self.id;
  barkV.parent = self.id;
  alarm[0] = barkCooldown;
  canBark = false;
  
  
  barkV.image_angle = point_direction(0, 0, phy_speed_x, phy_speed_y) + 180;
  var barkSound = choose(sndBark, sndBark2, sndBark3);
  audio_play_sound(barkSound, 100, false);  
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
