<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSheepPlaceholder</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objCanCollide</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup default variables

baseSpeed = room_speed / 20;

maxSpeed = room_speed / 6;

distMult = 1.5;

dogMult = 6;
scareDist = sprite_width * dogMult;

direction = irandom(360);
meanderDir = random_range(-5,5);
alarm[0] = floor(random(2) * room_speed);

scared = false;
nearDog = false;

scareChance = 0.6;
unscareChance = 0.4;

//For movement code 3
targetX = x;
targetY = y;

speedDist = scareDist;

wandering = false;

eShell = 5;

wanderSpeed = baseSpeed;
wanderTime = 40;

var rTime = random(wanderTime);
alarm[1] = floor(rTime * room_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Turn on wander

wandering = true;
targetX = x + random_range(-100, 100);
targetY = y + random_range(-100, 100);

wanderSpeed = baseSpeed * random_range(0.5,1.2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change meander direction

meanderDir = random_range(-10,10);

alarm[0] = floor(random(2) * room_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///REMOVED: New herding code
/*
var sheep = self.id;
var findScared = false;

with (objSheep) {  
  var dist = scrEucDist(sheep, id);
  var dir = point_direction(sheep.x, sheep.y, x, y);
  
    if ((id != sheep.id) &amp;&amp; (dist &lt; global.maxDist) &amp;&amp; (abs(dir - sheep.direction) &lt; 90)) {
        if (nearDog) {          
          //if (random(1) &lt; scareChance) {
            sheep.scared = true;
          //}
          findScared = true;
        }
    }  
}

if (!findScared &amp;&amp; random(1) &lt; unscareChance) {
  sheep.scared = false;
}


if (scared) {

  /////////////Movement based on local flock/////////////
  var centerx = 0;
  var centery = 0;
  var flockCount = 0;
  var cenDir;
  
  var directions = 0;
  var speeds = 0;
  var moveCount = 0;
  
  with (objSheep) {
    //Only consider if within maxDist of main sheep, and is not same sheep
    var dist = scrEucDist(sheep, id);
    var dir = point_direction(sheep.x, sheep.y, x, y);
    
    //Based on center of flock
    if ((id != sheep.id) &amp;&amp; (dist &lt; global.maxDist)) {// &amp;&amp; (abs(dir - sheep.direction) &lt; 90)) {
      centerx += x;
      centery += y;
      flockCount++;      
    }  
    
    //This is a little weird, because some are affected by old direction and some by new
    //Come back to this if we have time and see if we can figure this out without making
    //it too time consuming
    //Based on other sheep within local flock that are moving
    if (speed &gt; 0) {
      directions += direction;
      speeds += speed;
      moveCount++;
    }
  }
  
  if (flockCount &gt; 0) {
    centerx /= flockCount;
    centery /= flockCount;
    cenDir = point_direction(x, y, centerx, centery);
  }
  
  if (moveCount &gt; 0) {
    directions /= moveCount;
    speeds /= moveCount;
  }
  
  //Try to avoid colliding with other sheep
  var cirColl = collision_circle(x, y, (sprite_width * distMult), objSheep, false, true);
  
  var collDir;
  
  if (cirColl != noone) {
    distMult = random(1) + 1;
    collDir = point_direction(cirColl.x, cirColl.y, x, y);
  }
  
  var trigger = false;
  if (flockCount &gt; 0) {
    trigger = true;
    if (moveCount &gt; 0) {
      if (cirColl != noone) {
        direction = (cenDir + directions + collDir) / 3;
      } else {
        direction = (cenDir + directions) / 2;
      }
    } else if (cirColl != noone) {
      direction = (cenDir + collDir) / 2;
    } else {
      direction = cenDir;
    }
  } else if (cirColl != noone) {
    direction = collDir;
    trigger = true;
  }
  
  
  var coll = instance_place(x+hspeed, y + vspeed, objCanCollide);

  if (coll != noone) {
    direction = point_direction(coll.x, coll.y, x, y);
    speed = baseSpeed;
    //speed = 0;
    trigger = true;
  }
  
  ////////////////////////////////////////////////////////////////////////////////////
  /////////////Movement based on dog/////////////
  var dog = instance_find(objDog, 0);
  
  //Where the sheep predicts the dog shall be
  var dogDist = scrEucDist(self.id, dog);
  var updatesAhead = dogDist / maxSpeed;
  var dX = (dog.x - dog.xprevious) * updatesAhead + dog.x;
  var dY = (dog.y - dog.yprevious) * updatesAhead + dog.y;
  
  //Get direction to run from
  var runDir = point_direction(dX, dY, x, y);
  
  //Figure out how fast to run and how much dog should influence their direction
  var scareMult = 1 - dogDist / scareDist;
  
  if (scareMult &lt; 0.1) {
    scareMult = 0.1;
  }  
  
  
  flockMult = 1 - scareMult;
  
  
  
  
  if (trigger) {
    direction = (flockMult * direction + scareMult * runDir);
  } else {
    direction = runDir;
  }
  speed = maxSpeed * scareMult;
  if (speed &lt; baseSpeed) {
    speed = baseSpeed;
  }
  scared = true;

} else {
  speed = 0;
}

*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///REMOVED - Determine direction and move
/*

if (scared) {
  var temp = scrBasicFlock(self.id);
  
  //Go to the center of the sheep near this sheep, but try to avoid each other
  if (temp[0] &gt;= 0 || temp[1] = 0) {
    direction = point_direction(x, y, temp[0], temp[1]);
    speed = baseSpeed;
  } else {
    speed = 0;
  }
  
  //Don't actually collide with each other
  var coll = instance_place(x+hspeed, y + vspeed, objCanCollide);
  
  if (coll != noone) {
    direction = point_direction(coll.x, coll.y, x, y);
    speed = baseSpeed;
    //speed = 0;
  }
  
  /*if (place_meeting(x+hspeed,y,objCanCollide)) {
    hspeed=0;
  }
  if (place_meeting(x,y+vspeed,objCanCollide)) {
    vspeed=0;
  }*/
/*  
  } else {
  speed = 0;  
}

var dogColl = collision_circle(x, y, scareDist, objDog, false, true);

if (dogColl != noone) {
  
  //Where the sheep predicts the dog shall be
  var dogDist = scrEucDist(self.id, dogColl);
  var updatesAhead = dogDist / maxSpeed;
  var dX = (dogColl.x - dogColl.xprevious) * updatesAhead + dogColl.x;
  var dY = (dogColl.y - dogColl.yprevious) * updatesAhead + dogColl.y;
  
  //Get direction to run from
  var runDir = point_direction(dX, dY, x, y);
  
  //Figure out how fast to run and how much dog should influence their direction
  var scareMult = 1 - dogDist / scareDist;
  
  if (scareMult &lt; 0) {
    scareMult = 0;
  } else if (scareMult &lt; 0.1) {
    scareMult = 0.1;
  }  
  
  
  flockMult = 1 - scareMult;
    
  direction = (flockMult * direction + scareMult * runDir);
  
  speed = maxSpeed * scareMult;
  scared = true;
  direction += wanderDir;
} else {
  
  with (objSheep) {
    var dist = scrEucDist(other.id, id);
    if (dist &lt; global.maxDist) {
      if (scared){ 
        other.scared = true;
      } 
    }
  }

  scared = false;
}


*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flock Herding/Herd Flocking code attempt 3
var sheep = self.id;
var findScared = false;

with (objSheep) {  
  var dist = scrEucDist(sheep, id);
  var dir = point_direction(sheep.x, sheep.y, x, y);
  
    if ((id != sheep.id) &amp;&amp; (dist &lt; global.maxDist) &amp;&amp; (abs(dir - sheep.direction) &lt; 90)) {
        if (nearDog) {          
          if (random(1) &lt; scareChance) {
            sheep.scared = true;
          }
          findScared = true;
        }
    }  
}

if (!findScared &amp;&amp; random(1) &lt; unscareChance) {
  sheep.scared = false;
}


if (scared) {

  /////////////Movement based on local flock/////////////
  var centerX = 0;
  var centerY = 0;
  var flockCount = 0;
  
  var moveX = 0;
  var moveY = 0;
  var moveCount = 0;
  
  with (objSheep) {
    //Only consider if within maxDist of main sheep, and is not same sheep
    var dist = scrEucDist(sheep, id);
    var dir = point_direction(sheep.x, sheep.y, x, y);
    
    //Based on center of flock
    if ((id != sheep.id) &amp;&amp; (dist &lt; global.maxDist)) {// &amp;&amp; (abs(dir - sheep.direction) &lt; 90)) {
      centerX += x;
      centerY += y;
      flockCount++;      
    }  
    
    if (targetX != x || targetY != y) {
      moveX += targetX;
      moveY += targetY;
      moveCount++;
    }
  }
  
  if (flockCount &gt; 0) {
    centerX /= flockCount;
    centerY /= flockCount;
  }
  
  if (moveCount &gt; 0) {
    moveX /= moveCount;
    moveY /= moveCount;
  }
  
  //Try to avoid colliding with other sheep
  var cirColl = collision_circle(x, y, (sprite_width * distMult), objSheep, false, true);
  
  var collX;
  var collY;
  
  if (cirColl != noone) {
    distMult = random(1) + 1;
    collDir = point_direction(cirColl.x, cirColl.y, x, y);
    collDist = point_distance(cirColl.x, cirColl.y, x, y);
    collX = lengthdir_x(collDist, collDir) + x;
    collY = lengthdir_y(collDist, collDir) + y;
  }
  
  var trigger = false;
  if (flockCount &gt; 0) {
    trigger = true;
    if (moveCount &gt; 0) {
      if (cirColl != noone) {
        dX = (centerX + moveX + collX) / 3;
        dY = (centerY + moveY + collY) / 3;
      } else {
        dX = (centerX + moveX) / 2;
        dY = (centerY + moveY) / 2;
      }
    } else if (cirColl != noone) {
      dX = (centerX + collX) / 2;
      dY = (centerY + collY) / 2;      
    } else {
      dX = centerX;
      dY = centerY;
    }
  } else if (cirColl != noone) {
    dX = collX;
    dY = collY;
    trigger = true;
  } else {
    dX = x;
    dY = y;
  }
  

if (collision_line(x, y, dX, dY, objCanCollide, false, true)) {
  dX += random_range(-50, 50);
  dY += random_range(-50, 50);
}
  //direction = point_direction(dX, dY, x, y);
  
  ////////////////////////////////////////////////////////////////////////////////////
  /////////////Movement based on dog/////////////
  var dog = instance_find(objDog, 0);
  
  //Where the sheep predicts the dog shall be
  var dogDist = scrEucDist(self.id, dog);
  var updatesAhead = dogDist / maxSpeed;
  var dogFutureX = (dog.x - dog.xprevious) * updatesAhead + dog.x;
  var dogFutureY = (dog.y - dog.yprevious) * updatesAhead + dog.y;
  
  //x &amp; y dist from dog
  var dogXDist = x - dog.x;
  var dogYDist = y - dog.y; 

  var ratio = dogDist / scareDist;
  
  dogTargetX = x + (dogXDist * 1/ratio);
  dogTargetY = y + (dogYDist * 1/ratio);
  
  //Figure out how fast to run and how much dog should influence their direction
  var scareMult = 1 - ratio;  
  if (scareMult &lt; 0.1) {
    scareMult = 0.1;
  }      
  flockMult = 1 - scareMult;
  
  
  
  
  if (trigger) {
    targetX = (flockMult * dX) + (scareMult * dogTargetX);
    targetY = (flockMult * dY) + (scareMult * dogTargetY);
  } else {
    targetX = dogTargetX;
    targetY = dogTargetY;
  }
    
  scared = true;

} else {
  if (wandering) {
    
    speed = wanderSpeed;
    if (point_distance(x, y, targetX, targetY) &lt; eShell ) {
      wandering = false;
      var rTime = random(wanderTime);
      alarm[1] = floor(rTime * room_speed);
      speed = 0;
    }
  } else {
    speed = 0;
  }
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move based on target x &amp; y
direction = point_direction(x, y, targetX, targetY);
var dist = point_distance(x, y, targetX, targetY);
speed = dist/speedDist * baseSpeed;
direction += meanderDir;

var coll = instance_place(x+hspeed, y + vspeed, objCanCollide);

if (coll != noone) {
//  direction = point_direction(coll.x, coll.y, x, y);
//  speed = baseSpeed;
  speed = 0;
  //trigger = true;
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if near dog

var dogColl = collision_circle(x, y, scareDist, objDog, false, true);

if (dogColl != noone) {
  nearDog = true;
  scared = true;
} else {
  nearDog = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///REDO LATER: Keep sheep on screen

var newx = x + hspeed;
var newy = y + vspeed;

if (newx &lt; 0 || newx &gt; room_width) {
  hspeed *= -1;
}

if (newy &lt; 0 || newy &gt; room_height) {
  vspeed *= -1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change sprite direction
image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEMP: Change sprite based on if scared or not

if (scared) {
  sprite_index = sprScared;
} else {
  sprite_index = sprSheepPlaceholder;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
