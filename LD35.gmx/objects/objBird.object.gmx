<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBirdFly</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize variables
image_speed = 0.05;
entering = true;
leaving = false;
hopping = false;

targetX = irandom(room_width - 100) + 50;
targetY = irandom(room_width - 250) + 70;

flySpeed = room_speed / 12;

leaveTime = 20;
hopTime = 3;

hopLength = 15;
hopSpeed = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start flying away

if (!leaving) {
  leaving = true;
  var r = irandom(4);
  
  switch (r) {
    case 0:
      targetX = irandom(room_width);
      targetY = -25;
      break;
    case 1:
      targetX = room_width + 25;
      targetY = irandom(room_height);
      break;
    case 2:
      targetX = irandom(room_width);
      targetY = room_height + 25;
      break;
    case 3:
      targetX = -25
      targetY = irandom(room_height);
      break;
  }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hop

if (!entering &amp;&amp; !leaving) {

    hopping = true;
    var dir = irandom(360);

    targetX = x + lengthdir_x(hopLength, dir);
    targetY = x + lengthdir_y(hopLength, dir);
        

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Land
if (entering) {
   
  dX = targetX - phy_position_x;
  dY = targetY - phy_position_y;
  
  
  var desiredVec = scrNormalizeVector(dX, dY);
  steeringX = (desiredVec[0] * flySpeed) - phy_speed_x;
  steeringY = (desiredVec[1] * flySpeed) - phy_speed_y;
  phy_speed_x = phy_speed_x + steeringX;
  phy_speed_x = min(abs(phy_speed_x), flySpeed) * sign(phy_speed_x);
  phy_speed_y = phy_speed_y + steeringY;
  phy_speed_y = min(abs(phy_speed_y), flySpeed) * sign(phy_speed_y);
  
  //show_debug_message(point_distance(phy_position_x, phy_position_y, targetX, targetY));
  //show_debug_message(string(phy_speed_x) + ", " + string(phy_speed_y));
  if (point_distance(phy_position_x, phy_position_y, targetX, targetY) &lt; (flySpeed)) {
    entering = false;
    
    phy_speed_x = 0;
    phy_speed_y = 0;
    
    //When to hop
    alarm[0] = irandom(hopTime) * room_speed;
    
    //When to leave
    alarm[1] = irandom(leaveTime) * room_speed;
    sprite_index = sprBird;
    image_speed = 0;
  }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Fly away
if (leaving) {
   
  dX = targetX - phy_position_x;
  dY = targetY - phy_position_y;
  
  
  var desiredVec = scrNormalizeVector(dX, dY);
  steeringX = (desiredVec[0] * flySpeed) - phy_speed_x;
  steeringY = (desiredVec[1] * flySpeed) - phy_speed_y;
  phy_speed_x = phy_speed_x + steeringX;
  phy_speed_x = min(abs(phy_speed_x), flySpeed) * sign(phy_speed_x);
  phy_speed_y = phy_speed_y + steeringY;
  phy_speed_y = min(abs(phy_speed_y), flySpeed) * sign(phy_speed_y);
  
  //show_debug_message(point_distance(phy_position_x, phy_position_y, targetX, targetY));
  //show_debug_message(string(phy_speed_x) + ", " + string(phy_speed_y));
  if (point_distance(phy_position_x, phy_position_y, targetX, targetY) &lt; (flySpeed)) {
    instance_destroy();
  }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If too close to dog or sheep, fly away

if (!entering &amp;&amp; !leaving) {
  var dog = instance_find(objDog, 0);
  var dogDist = scrEucDist(self.id, dog);
  
  var bark = instance_find(objBark, 0);
  if (bark != noone) {
    var barkDist = scrEucDist(self.id, bark);
  } else {
    var barkDist = 9999;
  }
  
  var closestSheep = noone;
  var closestDist = 99999999999;
  
  with (objSheep) {
    var sheepDist = scrEucDist(self.id, other.id);
    if (sheepDist &lt; closestDist) {
      closestSheep = self.id;
      closestDist = sheepDist;
    }
  }
  
  if (dogDist &lt; 35 || sheepDist &lt; 20 || barkDist &lt; 75) {
    alarm[1] = 1;
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hop
if (hopping) {

  image_index = 1;

  dX = targetX - phy_position_x;
  dY = targetY - phy_position_y;
  
  
  var desiredVec = scrNormalizeVector(dX, dY);
  steeringX = (desiredVec[0] * hopSpeed) - phy_speed_x;
  steeringY = (desiredVec[1] * hopSpeed) - phy_speed_y;
  phy_speed_x = phy_speed_x + steeringX;
  phy_speed_x = min(abs(phy_speed_x), hopSpeed) * sign(phy_speed_x);
  phy_speed_y = phy_speed_y + steeringY;
  phy_speed_y = min(abs(phy_speed_y), hopSpeed) * sign(phy_speed_y);

  if (point_distance(phy_position_x, phy_position_y, targetX, targetY) &lt; (hopSpeed)) {
    hopping = false;
    
    phy_speed_x = 0;
    phy_speed_y = 0;
    
    image_index = 0;
  }
  //When to hop next
  alarm[0] = floor(random(hopTime) * room_speed) + 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Bird facing

var dir = point_direction(0, 0, phy_speed_x, phy_speed_y);

image_angle = (dir + 180) % 360;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>6,5</point>
    <point>6,6</point>
  </PhysicsShapePoints>
</object>
